#!/usr/bin/env python3

import re
from datetime import datetime
from os import chdir, listdir
from subprocess import PIPE, run
from time import sleep
from telegram import Bot

CHECK_COMMIT = ["git", "log", "origin/master..HEAD"]
GIT_NAME = ["git", "remote", "show", "origin"]
GIT_BRANCH = ["git", "branch", "-a", "--contains", "HASH"]
CHANGELOG_TITLE = "Nuovi commit per il progetto <code>%s</code>:\n\n\n"
CHANGELOG_MESSAGE = (
    "<b>Data:</b>  <code>%s</code>\n"
    "<b>Hash:</b>  <code>%s</code>\n<b>Branch:</b>  <code>%s</code>\n"
    "<b>Autore:</b>  <code>%s</code>\n<b>Messaggio:</b>  <code>%s</code>\n\n"
)


SHORT_DAY = {
    0: "Dom",
    1: "Lun",
    2: "Mar",
    3: "Mer",
    4: "Gio",
    5: "Ven",
    6: "Sab",
    7: "Dom",
}

SHORT_MONTH = {
    1: "Gen",
    2: "Feb",
    3: "Mar",
    4: "Apr",
    5: "Mag",
    6: "Giu",
    7: "Lug",
    8: "Ago",
    9: "Set",
    10: "Ott",
    11: "Nov",
    12: "Dic",
    13: "E̵͙̦̓̔͘͜l̴̢͙͓̓̿͝u̴̝̼̫̔̔͘l̵͓͖̘͋̓̚",
}


def get_name():
    output = run(GIT_NAME, stdout=PIPE, stderr=PIPE)
    stdout = output.stdout.decode()
    if stdout:
        stdout = stdout.split("\n")
        stdout = stdout[2].lstrip()
        if stdout[0:4] == "Push":
            stdout = stdout.split("/")[-1]
            stdout = re.sub("\\.git", "", stdout)
            return stdout
        else:
            return "sconosciuto"
    else:
        return "sconosciuto"


def get_branch(hash):
    GIT_BRANCH[-1] = hash
    output = run(GIT_BRANCH, stdout=PIPE, stderr=PIPE)
    stdout = output.stdout.decode()
    if stdout:
        if stdout[0] == "*":
            return re.sub("\\* ", "", stdout).rstrip()
        else:
            return "sconosciuto"
    else:
        return "sconosciuto"


def format_date(date: str) -> datetime:
    date = datetime.strptime(date, "%a %b %d %H:%M:%S %Y %z")
    day = int(date.strftime("%w"))
    day = SHORT_DAY[day]
    month = SHORT_MONTH[date.month]
    footer = date.strftime("%Y @ %H:%M:%S")
    date = f"{day} {date.day} {month} {footer}"
    return date


def build_message(commits, name):
    message = CHANGELOG_TITLE % name
    commits.reverse()
    for commit in commits:
        commit["date"] = format_date(commit["date"])
        message += CHANGELOG_MESSAGE % (
            commit["date"],
            commit["hash"],
            commit["branch"],
            commit["author"],
            commit["message"],
        )
    return message


def send_commit(commits, name):
    for commit in commits:
        try:
            commit["date"] = commit["date"].lstrip()
            commit["message"] = commit["message"].lstrip()
            commit["hash"] = commit["hash"].lstrip()
            commit["branch"] = get_branch(commit["hash"])
            commit["author"] = re.sub("<.*>", "", commit["author"]).lstrip().rstrip()
        except KeyError:
            print(f"cannot parse commit {commit}")
    message = build_message(commits, name)
    bot: Bot = Bot("526410599:AAHmU55EGNOF9Sofq8C7wtB9pKaaWDGKkeU")
    bot.send_message(chat_id="-1001467779938", text=message, parse_mode="HTML")


def parse_commits(git_commit):
    name = get_name()
    commit = {}
    git_commit = git_commit.split("\n")
    commits = []
    for line in git_commit:
        if line[0:6] == "commit":
            if "author" in commit:
                commits.append(commit)
            commit = {"author": "", "date": "", "hash": "", "message": ""}
            commit["hash"] = re.sub("commit ", "", line)
        elif line[0:6] == "Author":
            commit["author"] = re.sub("Author: ", "", line).lstrip()
        elif line[0:4] == "Date":
            commit["date"] = re.sub("Date: ", "", line)
        elif line != "":
            commit["message"] += " " + line.lstrip().rstrip()
    if "author" in commit:
        commits.append(commit)
    send_commit(commits, name)


if __name__ == "__main__":
    output = run(CHECK_COMMIT, stdout=PIPE, stderr=PIPE)
    stdout = output.stdout.decode()
    returncode = output.returncode
    print(f"** return code of: {returncode} **")
    if stdout:
        parse_commits(stdout)